name: Create draft release

on:
  workflow_call:
    inputs:
      ASSET_FILE:
        description: "Asset's file name."
        default: ""
        required: true
        type: string
      ASSET_NAME:
        description: "Asset's name."
        default: ""
        required: true
        type: string
      COMMIT:
        description: "Commit to get tagged."
        default: ""
        required: true
        type: string
      LATEST:
        description: "Flag as latest"
        default: false
        required: false
        type: boolean
      TAG:
        description: "Tag to create."
        default: ""
        required: true
        type: string
      TITLE:
        description: "Title"
        default: "Draft, intended for CI / CD only."
        required: false
        type: string

# Restrict permissions of GITHUB_TOKEN
# Access to scopes not specified is set to "none"
#permissions:
#  contents: read

env:
  JSON_OUTPUT: "id,name,createdAt,tagName,assets"

defaults:
  run:
    shell: bash

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Set environment
        run: |
          echo "SHA_SHORT=$(git rev-parse --short ${{ inputs.COMMIT }} )" >> "$GITHUB_ENV"

      # Check if release already exists
      - name: View release ${{ inputs.TAG }}
        id: view-release
        run: |
          gh release view ${{ inputs.TAG }} --json ${{ env.JSON_OUTPUT }} | jq -e .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # Delete release if it already exists
      - name: Delete release ${{ inputs.TAG }}
        if: steps.view-release.outcome == 'success'
        run: |
          gh release delete ${{ inputs.TAG }} --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create release
      - name: Create release on ${{ env.SHA_SHORT }} with tag ${{ inputs.TAG }}
        run: |
          gh release create \
            "${{ inputs.TAG }}" \
            "${{ inputs.ASSET_FILE }}#${{ inputs.ASSET_NAME }}" \
            --latest=${{ inputs.LATEST }} \
            --target ${{ inputs.COMMIT }} \ 
            --title "${{ inputs.TITLE }}" 
            --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # View details of created release
      - name: Post View release ${{ inputs.TAG }}
        run: |
          gh release view ${{ inputs.TAG }} --json ${{ env.JSON_OUTPUT }} | jq -e .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
